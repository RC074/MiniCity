{"version":3,"sources":["components/Weather/Weather.module.css","components/SearchBar/SearchBar.module.css","components/Tweets/Tweets.module.css","components/Popup/Popup.module.css","components/Corona/Corona.module.css","api/index.js","components/SearchBar/SearchBar.jsx","components/Tweets/Tweets.jsx","components/Weather/Weather.jsx","components/Corona/Corona.jsx","components/Popup/Popup.jsx","App.js","index.js"],"names":["module","exports","url","fetchData","toPost","a","i","fetch","method","body","JSON","stringify","response","json","console","log","SearchBar","props","useState","address","setAddress","window","location","hash","hashloc","setHashloc","scriptLoad","setScriptLoad","handleSelect","value","id","obj","geocodeByAddress","results","getLatLng","lat","lng","Geocode","setApiKey","fromLatLng","province","getData","city","terms","country","length","address_components","long_name","useEffect","addEventListener","style","visibility","opacity","transition","onLoad","onChange","onError","error","handlePlacesError","onSelect","searchOptions","types","getInputProps","suggestions","getSuggestionItemProps","loading","className","styles","container","placeholder","search","onClick","dropdownMenu","map","suggestion","padding","backgroundColor","fontFamily","active","key","formattedSuggestion","mainText","secondaryText","Tweets","React","memo","count","ids","data","height","show","borderWidth","handleLoad","sleep","tweets","options","align","conversation","theme","onTweetLoadSuccess","calc","x","y","innerHeight","innerWidth","trans","s","Weather","weather","useSpring","xys","config","mass","tension","friction","p","set","div","card","onMouseMove","clientX","clientY","onMouseLeave","transform","interpolate","width","fontSize","textAlign","position","top","info","time","tz","d","Date","localTime","getTime","localOffset","getTimezoneOffset","year","getFullYear","month","getMonth","getDate","getHours","getMinutes","unixToDate","temp","description","prevProps","nextProps","Corona","iconBox","confirmed","category","dead","recovered","Popup","setShow","styled","scroll","bottom","instructions","App","state","corona","initial","tweetLoading","weatherLoading","coronaLoading","handleData","setState","handleTweetLoading","bool","handleWeatherLoading","handleCoronaLoading","TweetConditionalRender","display","WeatherConditionalRender","CoronaConditionalRender","href","this","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.94b0b7b7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"Weather_info__2Tmb7\",\"time\":\"Weather_time__LiwFF\",\"temp\":\"Weather_temp__1F3VN\",\"description\":\"Weather_description__dmzes\",\"card\":\"Weather_card__1i1vW\",\"container\":\"Weather_container__8ILTM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SearchBar_container__1NLnq\",\"search\":\"SearchBar_search__1uGbo\",\"dropdownMenu\":\"SearchBar_dropdownMenu__3qMo6\",\"loading\":\"SearchBar_loading__1H7S-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Tweets_container__3Ipdp\",\"tweets\":\"Tweets_tweets__310X3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"scroll\":\"Popup_scroll__1GDrf\",\"bounce\":\"Popup_bounce__2Dd_C\",\"instructions\":\"Popup_instructions__3WWFc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"Corona_info__3gTFB\",\"time\":\"Corona_time__1ui7m\",\"category\":\"Corona_category__3RVvf\",\"recovered\":\"Corona_recovered__18hKc\",\"confirmed\":\"Corona_confirmed__3v9Uv\",\"dead\":\"Corona_dead__10R5f\",\"province\":\"Corona_province__VEz2k\",\"iconBox\":\"Corona_iconBox__SlFjF\",\"card\":\"Corona_card__2xYJ3\",\"container\":\"Corona_container__pKGhe\"};","const HEROKU_URL = \"https://flask-app-summative-backend.herokuapp.com/\";\n\nconst DEV_URL = \"http://127.0.0.1:8080/\";\n\nconst CSC_URL = \"https://csclub.uwaterloo.ca/~r26li/MiniCity-backend/\";\n\nlet url = CSC_URL;\n\nexport const fetchData = async (toPost) => {\n  // sends a http post request and returns the response obj\n  // try block bc there might be unexpected errors such as 501, 503...\n  for (let i = 0; i < 2; i++) {\n    try {\n      // await the data to get back, then move on\n      const response = await fetch(url, {\n        method: \"POST\",\n        body: JSON.stringify(toPost),\n      });\n\n      // returns the data\n      return response.json();\n    } catch (error) {\n      // log the error for debugging purposes\n      console.log(error);\n      console.log(\"failed using url: \" + url);\n      if (i === 0) {\n        url = HEROKU_URL;\n        console.log(\"retrying with url: \" + url);\n      }\n    }\n  }\n};\n","import React, { useState, useEffect } from \"react\";\n\nimport Script from \"react-load-script\";\n// used for\nimport Geocode from \"react-geocode\";\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from \"react-places-autocomplete\";\n\nimport styles from \"./SearchBar.module.css\";\n\nconst SearchBar = (props) => {\n  // address is the place holder for the current address user selected\n  // hashloc is the hash url\n  const [address, setAddress] = useState(\"\");\n  const [hashloc, setHashloc] = useState(window.location.hash);\n  const [scriptLoad, setScriptLoad] = useState(false);\n\n  // this function will be called when user select a location\n  const handleSelect = async (value, id, obj) => {\n    // change the current address value\n    setAddress(value);\n\n    // get the geocode from the current location\n    const results = await geocodeByAddress(value);\n    const { lat, lng } = await getLatLng(results[0]);\n\n    if (obj !== null) {\n      // Geocode.setApiKey(process.env.REACT_APP_G_API);\n      Geocode.setApiKey(\"AIzaSyCXeTETZAgrj3LXbFqo7atOq4a5N-r9L0Q\");\n\n      // get the province from lat lng\n      let province = await Geocode.fromLatLng(lat, lng);\n\n      // organize and export the data to parent component\n      props.getData({\n        city: obj.terms[0].value,\n        country: obj.terms[obj.terms.length - 1].value,\n        province:\n          province.results[province.results.length - 3].address_components[0]\n            .long_name,\n        lat: lat,\n        lng: lng,\n      });\n    }\n  };\n\n  // error catch\n  const handlePlacesError = (error) => {\n    console.log(error);\n  };\n\n  // delete the current location once clicked on the x mark\n  const handleDelete = () => {\n    setAddress(\"\");\n  };\n\n  const handleScriptLoad = () => {\n    setScriptLoad(true);\n  };\n\n  // always update the hash location\n  useEffect(() => {\n    window.addEventListener(\"hashchange\", () => {\n      setHashloc(window.location.hash);\n    });\n  });\n\n  // component's html with some js\n  return (\n    <div\n      style={{\n        visibility: hashloc === \"#t1\" || hashloc === \"\" ? \"initial\" : \"hidden\",\n        opacity: hashloc === \"#t1\" || hashloc === \"\" ? 1 : 0,\n        transition: \"visibility 0s, opacity 1s linear\",\n      }}\n    >\n      <Script\n        url={`https://maps.googleapis.com/maps/api/js?key=AIzaSyCXeTETZAgrj3LXbFqo7atOq4a5N-r9L0Q&libraries=places`}\n        onLoad={handleScriptLoad}\n      />\n      {scriptLoad ? (\n        <PlacesAutocomplete\n          value={address}\n          onChange={setAddress}\n          onError={(error) => handlePlacesError(error)}\n          onSelect={handleSelect}\n          searchOptions={{ types: [\"(cities)\"] }}\n        >\n          {({\n            getInputProps,\n            suggestions,\n            getSuggestionItemProps,\n            loading,\n          }) => (\n            <div>\n              <div className={styles.container}>\n                <input {...getInputProps({ placeholder: \"Anywhere...\" })} />\n                <div\n                  className={styles.search}\n                  onClick={() => handleDelete()}\n                ></div>\n              </div>\n\n              <div className={styles.dropdownMenu}>\n                {loading ? (\n                  <div className={styles.loading}>...loading</div>\n                ) : null}\n\n                {suggestions.map((suggestion, i) => {\n                  const className = suggestion.active\n                    ? \"suggestionitemActive\"\n                    : \"suggestionItem\";\n                  let style = {\n                    padding: \"15px\",\n                    backgroundColor: \"transparent\",\n                    transition: \"0.2s\",\n                    fontFamily: '\"Inconsolata\", monospace',\n                  };\n                  if (className === \"suggestionitemActive\") {\n                    style[\"borderLeft\"] = \"10px solid rebeccapurple\";\n                    style[\"cursor\"] = \"pointer\";\n                  }\n                  if (i === 0) {\n                    style[\"paddingTop\"] = \"40px\";\n                  }\n                  return (\n                    <div\n                      {...getSuggestionItemProps(suggestion, { style })}\n                      key={i}\n                    >\n                      {suggestion.formattedSuggestion.mainText +\n                        \" \" +\n                        suggestion.formattedSuggestion.secondaryText}\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n        </PlacesAutocomplete>\n      ) : null}\n    </div>\n  );\n};\n\nexport default SearchBar;\n","import React from \"react\";\nimport styles from \"./Tweets.module.css\";\nimport TweetEmbed from \"react-tweet-embed\"; // used to generate Tweets\n\nconst Tweets = React.memo((props) => {\n  let count = 0; // keep track how many tweets are loaded\n  const ids = props.data;\n\n  // if there is no tweets then return the html below\n  if (ids.length === 0) {\n    return (\n      <div\n        className={styles.container}\n        style={{\n          height: props.show ? \"600px\" : \"0px\",\n          borderWidth: props.show ? \"10px\" : \"0px\",\n        }}\n      ></div>\n    );\n  }\n  async function sleep() {\n    props.loading(false);\n  }\n  const handleLoad = () => {\n    count++;\n    if (count === ids.length) {\n      // if all the tweets are loaded, change the loading to be false\n      sleep();\n    }\n  };\n\n  // component's html\n  return (\n    <div\n      className={styles.container}\n      style={{\n        height: props.show ? \"600px\" : \"0px\",\n        borderWidth: props.show ? \"10px\" : \"0px\",\n      }}\n    >\n      <ul className={styles.tweets}>\n        {ids.map((id) => (\n          <li key={id}>\n            <TweetEmbed\n              id={id}\n              options={{\n                align: \"center\",\n                conversation: \"none\",\n                theme: \"dark\",\n              }}\n              onTweetLoadSuccess={() => handleLoad()}\n            />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n});\nexport default Tweets;\n","import React from \"react\";\nimport { useSpring, animated } from \"react-spring\";\n\nimport styles from \"./Weather.module.css\";\n\n// some math logic for the card animation\nconst calc = (x, y) => [\n  -(y - window.innerHeight / 2) / 60,\n  (x - window.innerWidth / 2) / 60,\n  1.08,\n];\n\n// for animation\nconst trans = (x, y, s) =>\n  `perspective(600px) rotateX(${x}deg) rotateY(${y}deg) scale(${s})`;\n\n// uses react.memo to remember the prevProps so this component will keep on refreshing itself\nconst Weather = React.memo(\n  (props) => {\n    // this function will return the given unix time in date format\n    const unixToDate = (tz) => {\n      var d = new Date();\n      var localTime = d.getTime();\n      var localOffset = d.getTimezoneOffset() * 60000;\n      var utc = localTime + localOffset;\n      var current = utc + 1000 * tz;\n      var a = new Date(current);\n      var months = [\n        \"Jan\",\n        \"Feb\",\n        \"Mar\",\n        \"Apr\",\n        \"May\",\n        \"Jun\",\n        \"Jul\",\n        \"Aug\",\n        \"Sep\",\n        \"Oct\",\n        \"Nov\",\n        \"Dec\",\n      ];\n      var year = a.getFullYear();\n      var month = months[a.getMonth()];\n      var date = a.getDate();\n      var hour = a.getHours();\n      var min = a.getMinutes();\n      var time = date + \" \" + month + \" \" + year + \" \" + hour + \":\" + min;\n      return time;\n    };\n\n    async function sleep() {\n      props.loading(false);\n    }\n\n    const data = props.weather;\n    if (data.length !== 0) {\n      sleep();\n    }\n\n    const [p, set] = useSpring(() => ({\n      xys: [0, 0, 1],\n      config: { mass: 5, tension: 300, friction: 40 },\n    }));\n\n    // all the possible weather icons for the corresponding weather\n    const weatherIcons = [\n      \"fas fa-sun\",\n      \"fas fa-cloud\",\n      \"fas fa-cloud-showers-heavy\",\n      \"fas fa-poo-storm\",\n      \"fas fa-snowflake\",\n      \"fas fa-cloud-rain\",\n      \"fas fa-smog\",\n    ];\n\n    // css variants\n    const weatherBox = {\n      height: \"300px\",\n      width: \"400px\",\n      fontSize: \"90px\",\n      textAlign: \"center\",\n    };\n\n    // css variants\n    const weather = {\n      position: \"relative\",\n      top: 100,\n    };\n\n    // component's html\n    return (\n      <div className={styles.container}>\n        <animated.div\n          className={styles.card}\n          onMouseMove={({ clientX: x, clientY: y }) => set({ xys: calc(x, y) })}\n          onMouseLeave={() => set({ xys: [0, 0, 1] })}\n          style={{ transform: p.xys.interpolate(trans) }}\n        >\n          <div style={weatherBox}>\n            <div className={weatherIcons[data[0]]} style={weather}></div>\n          </div>\n          <div className={styles.info}>\n            <div className={styles.time}>\n              <time>{unixToDate(data[2])}</time>\n            </div>\n            <div className={styles.temp}>\n              <div>{data[1]}</div>\n            </div>\n            <div className={styles.description}>\n              <div>{data[3]}</div>\n            </div>\n          </div>\n        </animated.div>\n      </div>\n    );\n  },\n  (prevProps, nextProps) => {\n    if (prevProps.weather === nextProps.weather) {\n      return true;\n    }\n    return false;\n  }\n);\n\nexport default Weather;\n","import React from \"react\"; // import react\nimport { useSpring, animated } from \"react-spring\"; // for card animation\n\nimport styles from \"./Corona.module.css\"; // import the styles as styles\n\n// some math logic for the card animation\nconst calc = (x, y) => [\n  -(y - window.innerHeight / 2) / 60,\n  (x - window.innerWidth / 2) / 60,\n  1.08,\n];\n\n// for animation\nconst trans = (x, y, s) =>\n  `perspective(600px) rotateX(${x}deg) rotateY(${y}deg) scale(${s})`;\n\n// uses react.memo to remember the prevProps so this component will keep on refreshing itself\nconst Corona = React.memo(\n  (props) => {\n    const data = props.data;\n\n    const [p, set] = useSpring(() => ({\n      xys: [0, 0, 1],\n      config: { mass: 5, tension: 300, friction: 40 },\n    }));\n\n    // sleep function, timeout 4000 is not necessary, it's just for the loading animation\n    async function sleep() {\n      props.loading(false);\n    }\n\n    // if (data.length !== 0) {\n    //   sleep();\n    // }\n\n    // some css variants\n    const virus = {\n      position: \"relative\",\n      top: 100,\n    };\n\n    // component's html\n    return (\n      <div className={styles.container}>\n        <animated.div\n          className={styles.card}\n          onMouseMove={({ clientX: x, clientY: y }) => set({ xys: calc(x, y) })}\n          onMouseLeave={() => set({ xys: [0, 0, 1] })}\n          style={{ transform: p.xys.interpolate(trans) }}\n        >\n          <div className={styles.iconBox}>\n            <div className=\"fas fa-virus\" style={virus}></div>\n          </div>\n          <div className={styles.info}>\n            <div className={styles.time}>{/* <time>{data[4]}</time> */}</div>\n            <div className={styles.province}>{/* <div>{data[0]}</div> */}</div>\n            <div className={styles.confirmed}>\n              <div className={styles.category} style={{ fontSize: \"20px\" }}>\n                {/* Confirmed:<span id={styles.confirmed}>{data[1]}</span> */}\n                Due to the covid tracker used by this app is no longer\n                maintained and the covid situation is slowly getting better,\n                this page will not be available at the moment\n              </div>\n            </div>\n            <div className={styles.dead}>\n              <div className={styles.category}>\n                {/* Dead:<span id={styles.dead}>{data[2]}</span> */}\n              </div>\n            </div>\n            <div className={styles.recovered}>\n              <div className={styles.category}>\n                {/* Recovered:\n                <span id={styles.recovered}>\n                  {data[3] === null ? \"Unknown\" : data[3]}\n                </span> */}\n              </div>\n            </div>\n          </div>\n        </animated.div>\n      </div>\n    );\n  },\n  (prevProps, nextProps) => {\n    if (prevProps.data === nextProps.data) {\n      return true;\n    }\n    return false;\n  }\n);\n\nexport default Corona;\n","import React, { useState, useEffect } from \"react\";\n\nimport styled from \"./Popup.module.css\"; // css file\n\nconst Popup = () => {\n  // the variables that controls the visibility of the instructions\n  const [show, setShow] = useState(false);\n  const [hashloc, setHashloc] = useState(\"\");\n\n  // this function will be called when user click to show the instruction\n  const handleClick = () => {\n    console.log(show);\n    setShow(!show);\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"hashchange\", () => {\n      setHashloc(window.location.hash);\n    });\n  }, []);\n\n  // component's html\n  return (\n    <div\n      className={styled.container}\n      style={{\n        visibility: hashloc === \"#t1\" || hashloc === \"\" ? \"initial\" : \"hidden\",\n        opacity: hashloc === \"#t1\" || hashloc === \"\" ? 1 : 0,\n        transition: \"visibility 0s, opacity 1s linear\",\n      }}\n    >\n      <button\n        onClick={handleClick}\n        className={styled.scroll}\n        style={{\n          bottom: show ? \"26.5vh\" : \"30px\",\n          transition: show ? \"all 0.1s ease-in\" : \"all 0.3s ease-in\",\n        }}\n      ></button>\n      <div\n        className={styled.instructions}\n        style={{ height: show ? \"25vh\" : \"0\", bottom: show ? \"0\" : \"-30px\" }}\n      >\n        When the app first loads, there will not be any data because the city is\n        not yet selected. To start, search any cities in the search bar above.\n        Once selected a city, you can now navigate to the other pages (on the\n        left hand side) to view the city's trends, weather and covid data. The\n        weather and covid are made in form of cards, they are some really nice\n        animation once you hover your mouse on top of them.\n      </div>\n    </div>\n  );\n};\n\nexport default Popup;\n","import React from \"react\";\nimport { fetchData } from \"./api\";\nimport SearchBar from \"./components/SearchBar/SearchBar\";\nimport Tweets from \"./components/Tweets/Tweets\";\nimport Weather from \"./components/Weather/Weather\";\nimport Corona from \"./components/Corona/Corona\";\nimport Popup from \"./components/Popup/Popup\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  // The App's state/variables\n  state = {\n    // the current location that the user selected, in dictionary format\n    location: {\n      city: null,\n      country: null,\n      province: null,\n      lat: null,\n      lng: null,\n    },\n\n    // list of tweets id, initialized to be empty\n    tweets: [],\n\n    // list of weather data, initialized to be empty\n    weather: [],\n\n    // list of corona data, initialized to be empty\n    corona: [],\n\n    // boolean: app's initial state, after user select a city this will be forever false until the page reloads\n    initial: true,\n\n    // is the tweets page loading?\n    tweetLoading: false,\n\n    // is the weather page loading?\n    weatherLoading: false,\n\n    // is the covid-19 page loading?\n    coronaLoading: false,\n  };\n\n  // Distributing data fetched from the api call\n  handleData = async (data) => {\n    await this.setState({ tweets: [], weather: [] });\n    this.setState({ initial: false });\n    this.setState({\n      tweetLoading: true,\n      weatherLoading: true,\n      // coronaLoading: true,\n    });\n    this.setState({ location: data });\n    const { tweets, weather } = await fetchData(data);\n    this.setState({ tweets: tweets, weather: weather });\n  };\n\n  // handles all the loading states\n  handleTweetLoading = (bool) => {\n    this.setState({ tweetLoading: bool });\n  };\n\n  handleWeatherLoading = (bool) => {\n    this.setState({ weatherLoading: bool });\n  };\n\n  handleCoronaLoading = (bool) => {\n    this.setState({ coronaLoading: bool });\n  };\n\n  // this function checks whether the data about the tweets are received, then it will determine whether to show the loading page or the tweets\n  TweetConditionalRender = () => {\n    return (\n      <div>\n        <div\n          style={{\n            display:\n              this.state.tweetLoading || this.state.initial ? \"\" : \"none\",\n          }}\n        >\n          <section className=\"icon fa fa-twitter\">\n            <span className=\"title\">TREND</span>\n            <div\n              style={{\n                visibility:\n                  this.state.tweets.length === 0 ? \"hidden\" : \"visible\",\n              }}\n            >\n              <span className=\"loader\">\n                <span className=\"loader-inner\"></span>\n              </span>\n            </div>\n          </section>\n        </div>\n        <div\n          style={{\n            visibility:\n              this.state.tweetLoading || this.state.initial\n                ? \"hidden\"\n                : \"visible\",\n          }}\n        >\n          <Tweets\n            show={this.state.tweetLoading || this.state.initial ? false : true}\n            loading={(bool) => this.handleTweetLoading(bool)}\n            data={this.state.tweets}\n          />\n        </div>\n      </div>\n    );\n  };\n\n  // this function checks whether the data about the weather is received, then it will determine whether to show the loading page or the weather card\n  WeatherConditionalRender = () => {\n    return (\n      <div>\n        <div\n          style={{\n            display:\n              this.state.weatherLoading || this.state.initial ? \"\" : \"none\",\n          }}\n        >\n          <section className=\"icon fas fa-cloud-sun\">\n            <span className=\"title\">WEATHER</span>\n            <div\n              style={{\n                visibility: !this.state.weatherLoading ? \"hidden\" : \"visible\",\n              }}\n            >\n              <span className=\"loader\">\n                <span className=\"loader-inner\"></span>\n              </span>\n            </div>\n          </section>\n        </div>\n        <div\n          style={{\n            visibility:\n              this.state.weatherLoading || this.state.initial\n                ? \"hidden\"\n                : \"visible\",\n          }}\n        >\n          <Weather\n            loading={(bool) => this.handleWeatherLoading(bool)}\n            weather={this.state.weather}\n          />\n        </div>\n      </div>\n    );\n  };\n\n  // this function checks whether the data about covid is received, then it will determine whether to show the loading page or the covid card\n  CoronaConditionalRender = () => {\n    return (\n      <div>\n        <div\n          style={{\n            display:\n              this.state.coronaLoading || this.state.initial ? \"\" : \"none\",\n          }}\n        >\n          <section className=\"icon fas fa-virus\">\n            <span className=\"title\">COVID-19</span>\n            <div\n              style={{\n                visibility: \"visible\",\n              }}\n            >\n              <span className=\"loader\">\n                <span className=\"loader-inner\"></span>\n              </span>\n            </div>\n          </section>\n        </div>\n        <div\n          style={{\n            visibility: \"visible\",\n          }}\n        >\n          <Corona loading={false} data={this.state.corona} />\n        </div>\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"ct\" id=\"t1\">\n        <div className=\"ct\" id=\"t2\">\n          <div className=\"ct\" id=\"t3\">\n            <div className=\"ct\" id=\"t4\">\n              <div className=\"ct\" id=\"t5\">\n                <ul id=\"menu\">\n                  <a href=\"#t1\">\n                    <li className=\"icon fa fa-search\" id=\"uno\"></li>\n                  </a>\n                  <a href=\"#t2\">\n                    <li className=\"icon fas fa-cloud-sun\" id=\"dos\"></li>\n                  </a>\n                  <a href=\"#t3\">\n                    <li className=\"icon fab fa-twitter\" id=\"tres\"></li>\n                  </a>\n                  <a href=\"#t4\">\n                    <li className=\"icon fas fa-virus\" id=\"cuatro\"></li>\n                  </a>\n                </ul>\n                <div className=\"page\" id=\"p1\">\n                  <section>\n                    <Popup />\n                    <SearchBar\n                      className=\"searchBar\"\n                      getData={(data) => this.handleData(data)}\n                    />\n                  </section>\n                </div>\n                <div className=\"page\" id=\"p2\">\n                  {this.WeatherConditionalRender()}\n                </div>\n                <div className=\"page\" id=\"p3\">\n                  {this.TweetConditionalRender()}\n                </div>\n                <div className=\"page\" id=\"p4\">\n                  {this.CoronaConditionalRender()}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n)\n\n"],"sourceRoot":""}